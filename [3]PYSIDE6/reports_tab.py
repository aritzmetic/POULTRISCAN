# reports_tab.py

import sys
import os
import csv
import qtawesome as qta
import re # For email validation
import smtplib # For sending email
from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText
from email.mime.base import MIMEBase
from email import encoders # For attaching file
from datetime import datetime

from PySide6.QtWidgets import (
    QWidget, QVBoxLayout, QHBoxLayout, QLabel, QFrame,
    QPushButton, QTreeWidget, QTreeWidgetItem, QHeaderView,
    QFileDialog, QScrollArea, QLineEdit
)
from PySide6.QtCore import Qt, QTimer, QSize, QThread, QObject, Signal, Slot
from PySide6.QtGui import QColor, QBrush, QFont

from custom_dialog import show_custom_message, CustomDialog

report_file = "poultri_scan_report.csv"

# --- SMTP Configuration (Unchanged) ---
SMTP_SERVER = "smtp.gmail.com"
SMTP_PORT = 587
SENDER_EMAIL = "poultriscan4201@gmail.com"
SENDER_PASSWORD = "ikaggyzetigoajre"
# --- END SMTP Configuration ---


# --- EmailWorker CLASS (Unchanged) ---
class EmailWorker(QObject):
    finished = Signal(str) 
    error = Signal(str, str)

    def __init__(self, recipient, palette, smtp_server, smtp_port, sender_email, sender_password, report_file_path):
        super().__init__()
        self.recipient_email = recipient
        self.palette = palette
        self.smtp_server = smtp_server
        self.smtp_port = smtp_port
        self.sender_email = sender_email
        self.sender_password = sender_password
        self.report_file = report_file_path

    @Slot()
    def run(self):
        try:
            now = datetime.now()
            date_str = now.strftime("%Y-%m-%d")
            time_str = now.strftime("%H:%M:%S")
            message = MIMEMultipart()
            message['From'] = self.sender_email
            message['To'] = self.recipient_email
            message['Subject'] = f"POULTRISCAN REPORT :: {date_str} {time_str}"
            accent_color = self.palette.get("ACCENT", "#E6B800")
            primary_color = self.palette.get("PRIMARY", "#B8860B")
            text_color = "#333333"
            light_text_color = "#FFFFFF"
            bg_color = "#f7f7f7"
            html_body = f"""
            <html>
            <head>
                <style>
                    body {{ font-family: Arial, Helvetica, sans-serif; font-size: 11pt; color: {text_color}; background-color: #ffffff; margin: 0; padding: 0; }}
                    .email-container {{ padding: 25px; background-color: #ffffff; }}
                    .content-card {{ padding: 30px; border: 1px solid #dddddd; border-radius: 8px; background-color: {bg_color}; max-width: 650px; margin: 20px auto; box-shadow: 0 2px 5px rgba(0,0,0,0.1); }}
                    .header {{ font-size: 20pt; font-weight: bold; color: {primary_color}; border-bottom: 3px solid {accent_color}; padding-bottom: 15px; margin-bottom: 20px; text-align: left; }}
                    .highlight {{ color: {primary_color}; font-weight: bold; }}
                    .footer {{ margin-top: 30px; padding-top: 15px; font-size: 10pt; color: #666666; border-top: 1px solid #dddddd; text-align: center; }}
                    .timestamp {{ font-style: italic; color: #777777; font-size: 10pt; margin-bottom: 20px; }}
                    p {{ line-height: 1.7; margin-bottom: 15px; }}
                    a {{ color: {primary_color}; text-decoration: none; }}
                    a:hover {{ text-decoration: underline; }}
                </style>
            </head>
            <body>
                <div class="email-container">
                    <div class="content-card">
                        <div class="header">PoultriScan Quality Analysis Report</div>
                        <p>Dear Recipient,</p>
                        <p>The attached CSV file contains the detailed test history generated by the <span class="highlight">PoultriScan</span> system.</p>
                        <p>This report includes:</p>
                        <ul>
                            <li>Sample identification and type</li>
                            <li>Timestamp of analysis</li>
                            <li>Environmental conditions (Temperature, Humidity)</li>
                            <li>Sensor readings (e.g., WHC Index, Fatty Acid Profile, VOC levels)</li>
                            <li>Calculated overall quality assessment</li>
                        </ul>
                        <p class="timestamp">
                            Report Generated: {date_str} at {time_str}
                        </p>
                        <p>Please review the attached data for comprehensive insights into the poultry sample analyses conducted.</p>
                        <div class="footer">
                            Regards,<br>
                            <b>The PoultriScan Team</b>
                        </div>
                    </div>
                </div>
            </body>
            </html>
            """
            message.attach(MIMEText(html_body, 'html'))
            with open(self.report_file, "rb") as attachment:
                part = MIMEBase('application', 'octet-stream')
                part.set_payload(attachment.read())
            encoders.encode_base64(part)
            part.add_header(
                'Content-Disposition',
                f"attachment; filename= {os.path.basename(self.report_file)}",
            )
            message.attach(part)
            with smtplib.SMTP(self.smtp_server, self.smtp_port) as server:
                server.starttls()
                server.login(self.sender_email, self.sender_password)
                server.send_message(message)
            self.finished.emit(f"Report successfully sent to:\n{self.recipient_email}")
        except smtplib.SMTPAuthenticationError:
            self.error.emit("Email Error", "Authentication failed. Please double-check SENDER_EMAIL and SENDER_PASSWORD (App Password).")
        except smtplib.SMTPConnectError:
            self.error.emit("Email Error", f"Could not connect to the email server ({self.smtp_server}). Check server/port and network connection.")
        except smtplib.SMTPServerDisconnected:
             self.error.emit("Email Error", "Server disconnected unexpectedly. Please try again.")
        except ConnectionRefusedError:
             self.error.emit("Email Error", f"Connection refused by the email server ({self.smtp_server}). Check server/port details.")
        except TimeoutError:
             self.error.emit("Email Error", f"Connection to the email server timed out. Check network connection.")
        except Exception as e:
            self.error.emit("Email Error", f"An unexpected error occurred:\n{type(e).__name__}: {e}")
# --- END EmailWorker CLASS ---


def _create_card(parent, title, palette, icon_name=None):
    """Helper to create a themed card."""
    card_frame = QWidget(parent)
    card_frame.setObjectName("card")
    card_layout = QVBoxLayout(card_frame)
    card_layout.setContentsMargins(15, 15, 15, 15)
    title_frame = QWidget()
    title_layout = QHBoxLayout(title_frame)
    title_layout.setContentsMargins(0, 0, 0, 0)
    title_layout.setSpacing(10)
    if icon_name:
        icon = qta.icon(icon_name, color=palette["ACCENT"])
        icon_label = QLabel()
        icon_label.setPixmap(icon.pixmap(QSize(35, 35))) # Was 30, 30
        icon_label.setStyleSheet("background-color: transparent;")
        title_layout.addWidget(icon_label)
    title_label = QLabel(title)
    title_label.setObjectName("subtitle")
    title_layout.addWidget(title_label)
    title_layout.addStretch()
    card_layout.addWidget(title_frame)
    content_frame = QWidget()
    content_frame.setStyleSheet(f"background-color: {palette['SECONDARY_BG']};")
    card_layout.addWidget(content_frame)
    return card_frame, content_frame

class ReportsTab(QWidget):
    def __init__(self, palette, root_window, parent=None):
        super().__init__(parent)

        self.palette = palette
        self.root_window = root_window
        self.email_thread = None
        self.email_worker = None
        self.processing_dialog = None

        # --- Main Layout ---
        page_layout = QVBoxLayout(self)
        page_layout.setContentsMargins(0, 0, 0, 0)
        scroll_area = QScrollArea()
        scroll_area.setWidgetResizable(True)
        scroll_content = QWidget()
        main_layout = QVBoxLayout(scroll_content)
        main_layout.setContentsMargins(10, 10, 10, 10)
        main_layout.setSpacing(15)

        # --- 1. REPORT CONTROL CARD ---
        control_card, control_frame = _create_card(
            scroll_content, " Report Control & Actions", palette, icon_name="fa5s.tasks"
        )
        main_layout.addWidget(control_card)
        control_layout = QHBoxLayout(control_frame)
        control_layout.setContentsMargins(0, 0, 0, 0)
        control_layout.setSpacing(15)
        self.btn_reload = QPushButton(" RELOAD Data")
        self.btn_reload.setIcon(qta.icon('fa5s.sync-alt', color=palette.get("BUTTON_TEXT", palette["BG"])))
        control_layout.addWidget(self.btn_reload)
        control_layout.addStretch(1)
        control_layout.addWidget(QLabel("Email to:"))
        self.email_input = QLineEdit()
        self.email_input.setPlaceholderText("recipient@example.com")
        self.email_input.setMinimumWidth(400) # Was 300
        control_layout.addWidget(self.email_input)
        self.btn_email = QPushButton(" EMAIL REPORT")
        self.btn_email.setIcon(qta.icon('fa5s.paper-plane', color=palette.get("BUTTON_TEXT", palette["BG"])))
        control_layout.addWidget(self.btn_email)
        self.btn_export = QPushButton(" EXPORT CSV")
        self.btn_export.setIcon(qta.icon('fa5s.save', color=palette.get("UNSELECTED_TEXT", "#555760")))
        self.btn_export.setObjectName("secondary")
        control_layout.addWidget(self.btn_export)

        # --- 2. REPORT DATA CARD ---
        data_card, data_frame = _create_card(
            scroll_content, " PoultriScan Test History", palette, icon_name="fa5s.history"
        )
        main_layout.addWidget(data_card, 1)
        data_layout = QVBoxLayout(data_frame)
        data_layout.setContentsMargins(0, 0, 0, 0)
        self.columns = (
            "Timestamp", "Sample ID", "Type", "Temperature", "Humidity",
            "WHC Index", "Fatty Acid Profile", "MQ-137 (NH3)",
            "MQ-135 (Air Quality)", "MQ-7 (CO)", "MQ-4 (CH4)", "Quality"
        )
        self.tree = QTreeWidget()
        self.tree.setColumnCount(len(self.columns))
        self.tree.setHeaderLabels(self.columns)
        self.tree.setAlternatingRowColors(True)
        data_layout.addWidget(self.tree)
        
        # Column Sizing (Unchanged, will inherit from QSS)
        numerical_cols = ["Temperature", "Humidity", "WHC Index", "Fatty Acid Profile", "MQ-137 (NH3)", "MQ-135 (Air Quality)", "MQ-7 (CO)", "MQ-4 (CH4)"]
        for i, col in enumerate(self.columns):
            if col in numerical_cols:
                self.tree.header().setSectionResizeMode(i, QHeaderView.ResizeMode.ResizeToContents)
                self.tree.setColumnWidth(i, 110)
            elif col in ["Sample ID", "Quality"]:
                self.tree.header().setSectionResizeMode(i, QHeaderView.ResizeMode.ResizeToContents)
                self.tree.setColumnWidth(i, 100)
            elif col == "Timestamp":
                self.tree.setColumnWidth(i, 160)
            else:
                self.tree.header().setSectionResizeMode(i, QHeaderView.ResizeMode.ResizeToContents)

        scroll_area.setWidget(scroll_content)
        page_layout.addWidget(scroll_area)
        self.btn_reload.clicked.connect(self.load_report_data)
        self.btn_export.clicked.connect(self.mock_export_report_data)
        self.btn_email.clicked.connect(self.email_report_data)
        self.load_report_data()

    def mock_export_report_data(self):
        # (Unchanged)
        if not os.path.exists(report_file):
            show_custom_message(self.root_window, "Export Failed", "No report file found to export.", "warning", self.palette)
            return
        export_path, _ = QFileDialog.getSaveFileName(
            self,
            "Export PoultriScan Report",
            "PoultriScan_Export.csv",
            "CSV files (*.csv)"
        )
        if export_path:
            try:
                import shutil
                shutil.copyfile(report_file, export_path)
                show_custom_message(self.root_window, "Export Successful", f"Report exported successfully to:\n{export_path}", "success", self.palette)
            except Exception as e:
                 show_custom_message(self.root_window, "Export Error", f"Failed to copy file: {e}", "error", self.palette)


    def email_report_data(self):
        # (Unchanged)
        recipient_email = self.email_input.text().strip()
        if not re.match(r"[^@]+@[^@]+\.[^@]+", recipient_email):
            show_custom_message(self.root_window, "Invalid Email", "Please enter a valid recipient email address.", "warning", self.palette)
            return
        if not os.path.exists(report_file):
            show_custom_message(self.root_window, "Email Failed", "No report file found to email.", "warning", self.palette)
            return
        self.processing_dialog = CustomDialog(
            self.root_window, 
            "Sending Email", 
            f"Sending report to {recipient_email}...\nPlease wait.", 
            "processing", 
            self.palette
        )
        self.email_thread = QThread()
        self.email_worker = EmailWorker(
            recipient=recipient_email,
            palette=self.palette,
            smtp_server=SMTP_SERVER,
            smtp_port=SMTP_PORT,
            sender_email=SENDER_EMAIL,
            sender_password=SENDER_PASSWORD,
            report_file_path=report_file
        )
        self.email_worker.moveToThread(self.email_thread)
        self.email_thread.started.connect(self.email_worker.run)
        self.email_worker.finished.connect(self.on_email_success)
        self.email_worker.error.connect(self.on_email_error)
        self.email_worker.finished.connect(self.email_thread.quit)
        self.email_worker.finished.connect(self.email_worker.deleteLater)
        self.email_thread.finished.connect(self.email_thread.deleteLater)
        self.btn_email.setEnabled(False)
        self.btn_email.setText(" SENDING...")
        icon_color = self.palette.get("BUTTON_TEXT", self.palette["BG"])
        self.btn_email.setIcon(qta.icon('fa5s.spinner', color=icon_color, animation=qta.Spin(self.btn_email)))
        self.email_thread.start()
        self.processing_dialog.show()

    @Slot(str)
    def on_email_success(self, message):
        # (Unchanged)
        if self.processing_dialog:
            self.processing_dialog.accept()
            self.processing_dialog = None
        self.btn_email.setEnabled(True)
        self.btn_email.setText(" EMAIL REPORT")
        icon_color = self.palette.get("BUTTON_TEXT", self.palette["BG"])
        self.btn_email.setIcon(qta.icon('fa5s.paper-plane', color=icon_color))
        show_custom_message(self.root_window, "Email Sent", message, "success", self.palette)

    @Slot(str, str)
    def on_email_error(self, title, message):
        # (Unchanged)
        if self.processing_dialog:
            self.processing_dialog.accept()
            self.processing_dialog = None
        self.btn_email.setEnabled(True)
        self.btn_email.setText(" EMAIL REPORT")
        icon_color = self.palette.get("BUTTON_TEXT", self.palette["BG"])
        self.btn_email.setIcon(qta.icon('fa5s.paper-plane', color=icon_color))
        show_custom_message(self.root_window, title, message, "error", self.palette)


    def load_report_data(self):
        # (Unchanged)
        self.tree.clear()
        brush_nodata = QBrush(QColor(self.palette["UNSELECTED_TEXT"]))
        nodata_font = QFont("Bahnschrift", 10, italic=True) # This is small, but ok for table
        loading_item = QTreeWidgetItem(self.tree, ["", "Loading report data..."] + [""] * 10)
        loading_item.setForeground(0, brush_nodata)
        loading_item.setFont(0, nodata_font)
        QTimer.singleShot(50, self._perform_load)

    def _perform_load(self):
        # (Unchanged)
        self.tree.clear()
        brush_high = QBrush(QColor(self.palette["SUCCESS"]))
        brush_low = QBrush(QColor(self.palette["DANGER"]))
        brush_normal = QBrush(QColor(self.palette["NORMAL_COLOR"]))
        brush_nodata = QBrush(QColor(self.palette["UNSELECTED_TEXT"]))
        nodata_font = QFont("Bahnschrift", 10, italic=True)
        if not os.path.exists(report_file):
            item = QTreeWidgetItem(self.tree, ["N/A", "No Data Found. Run Analysis or check Settings."] + ["N/A"] * 10)
            for i in range(self.tree.columnCount()):
                item.setForeground(i, brush_nodata)
                item.setFont(i, nodata_font)
            return
        try:
            rows_to_insert = []
            with open(report_file, "r", newline="") as f:
                reader = csv.reader(f)
                try:
                    next(reader)
                except StopIteration:
                     item = QTreeWidgetItem(self.tree, ["N/A", "Report file is empty."] + ["N/A"] * 10)
                     for i in range(self.tree.columnCount()):
                         item.setForeground(i, brush_nodata)
                         item.setFont(i, nodata_font)
                     return
                for row in reader:
                    if len(row) >= 12:
                        rows_to_insert.append(row[:12])
                    else:
                        print(f"Skipping malformed row: {row}")
            if not rows_to_insert:
                 item = QTreeWidgetItem(self.tree, ["N/A", "No valid data found in report file."] + ["N/A"] * 10)
                 for i in range(self.tree.columnCount()):
                     item.setForeground(i, brush_nodata)
                     item.setFont(i, nodata_font)
            for data in rows_to_insert:
                item = QTreeWidgetItem(self.tree, data)
                quality = str(data[-1]).upper()
                if quality in ['FRESH', 'SLIGHTLY FRESH']:
                    item.setForeground(self.columns.index("Quality"), brush_high)
                elif quality == 'NORMAL':
                    item.setForeground(self.columns.index("Quality"), brush_normal)
                elif quality == 'SPOILT':
                    item.setForeground(self.columns.index("Quality"), brush_low)
        except Exception as e:
            self.tree.clear()
            error_msg = f"Error reading report file: {e}"
            print(error_msg)
            show_custom_message(self, "Report Error", error_msg, "error", self.palette)
            item = QTreeWidgetItem(self.tree, ["N/A", "Error loading data."] + ["N/A"] * 10)
            for i in range(self.tree.columnCount()):
                item.setForeground(i, brush_nodata)
                item.setFont(i, nodata_font)